/**
 * 
 */
package com.cmc.exepciones;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.cmc.evaluacion.fase2.commons.util.DateUtil;
import com.cmc.evaluacion.fase2.commons.util.TipoPrestamo;
import com.cmc.evaluacion.fase2.entidades.Cartera;
import com.cmc.evaluacion.fase2.entidades.Prestamo;



public class AdminPrestamos {

	public static final Logger LOGGER = LogManager.getLogger(AdminPrestamos.class);



	public static void colocarPrestamos(String rutaArchivo, Cartera cartera) throws EvaluacionException {
		FileReader fileReader = null;
		BufferedReader br = null;
		String linea = null;

		File archivo = new File(rutaArchivo);
		try {
			fileReader = new FileReader(archivo);
			br = new BufferedReader(fileReader);

			while ((linea = br.readLine()) != null) {
				armarPrestamo(linea, cartera);
				LOGGER.trace("Linea: " + linea);
			}
			LOGGER.trace("Fin del proceso lectura");

		} catch (FileNotFoundException e) {

			LOGGER.error("No se encuentra archivo", e);

			throw new EvaluacionException("No se encuentra archivo: " + rutaArchivo);
		} catch (IOException e) {

			LOGGER.error("No es posible leer el archivo");

			throw new EvaluacionException("Imposible leer el archivo: " + rutaArchivo);
		} finally {
			try {
				if (fileReader != null) {
					fileReader.close();
				}
				if (br != null) {
					br.close();
				}
			} catch (IOException e) {

				LOGGER.error("Error al cerrar la lectura", e);
			}
		}
	}

	
	private static void armarPrestamo(String lineaLeida, Cartera cartera) {
		String[] pz = new String[4];
		Prestamo prestamo = null;
		String tipo = null;

		try {
			pz = lineaLeida.split("-");
			tipo = pz[1].substring(0, 1);
			if (tipo.equals(TipoPrestamo.HIPOTECARIO)) {
				prestamo = new Prestamo(pz[1].substring(1, pz[1].length()), pz[0]);
				prestamo.setTipo(TipoPrestamo.HIPOTECARIO);
				prestamo.setFecha(DateUtil.convertir(pz[2]));
				prestamo.setMonto(Double.parseDouble(pz[3]));
			} else if (tipo.equals(TipoPrestamo.QUIROGRAFARIO)) {
				prestamo = new Prestamo(pz[1].substring(1, pz[1].length()), pz[0]);
				prestamo.setTipo(TipoPrestamo.QUIROGRAFARIO);
				prestamo.setFecha(DateUtil.convertir(pz[2]));
				prestamo.setMonto(Double.parseDouble(pz[3]));
			} else {
				prestamo = new Prestamo(pz[1].substring(1, pz[1].length()), pz[0]);
				prestamo.setTipo(TipoPrestamo.OTRO);
				prestamo.setFecha(DateUtil.convertir(pz[2]));
				prestamo.setMonto(Double.parseDouble(pz[3]));
			}

			cartera.colocarPrestamo(prestamo);

		} catch (Exception e) {
			LOGGER.error("Error al armar prestamo en la l√≠nea", e);
		}
	}

}